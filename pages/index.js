import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import "../styles/Home.module.css";
import boxes from "../assets/boxes.jpg";
import noBoxes from "../assets/carpark-image.png";
import detection from "../assets/detection.gif";
import gray from "../assets/gray.jpg";
import grayBlur from "../assets/grayBlur.jpg";
import threshold from "../assets/threshold.jpg";

export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>CS639 Parking Lot Detector</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          CS639 <h2 className={styles.subtitle}>Parking Lot Detector</h2>
        </h1>

        <code className={styles.code}>Malcolm Sng, Teng Jianling</code>
      </main>
      <div classnName={styles.content}>
        <h2 className={styles.header}>Problem Statement</h2>
        <div>
          Finding parking for our vehicles is a headache for many people,
          especially during peak hours at popular parking areas (shopping malls,
          workplaces, etc) or at event venues (football games, concerts,
          parties, etc). This is made worse when people drive to the carpark and
          have to wait in line for long periods or find alternative parking when
          they realise that the car park is full.
        </div>
        <h2 className={styles.header}>Current Implementations</h2>
        <div>
          Current implementations include:
          <ol>
            <li>Using cameras to monitor the occupancy of the opposite lot.</li>
            <li>Using GPS tracking</li>
          </ol>
          There are several problems with the above methods. For example, it
          would be costly for businesses to purchase one camera for every
          parking lot, which may be a requirement for the first implementation.
          Next, many open air car parks would not have the infrastructure
          available to support such an implementation. For the second
          implementation, not all devices which are at a specific car park is
          driving, there may also be multiple devices emitting location data in
          a single vehicle, which reduces accuracy of such an implementatio
        </div>
        <h2 className={styles.header}>Proposed Solution</h2>
        <div>
          We propose a parking availability tracker, using aerial videos. The
          program will recognise the difference between a vehicle/ unusable lot
          and an empty lot, provide a count of the total number of vehicles and
          empty lots in a carpark at any one time, and relay the information to
          display boards/ tracking websites
        </div>
        <div className={styles.main}>
          <h2 className={styles.header}>How It Works</h2>
          <div>
            <Image src={noBoxes} alt=""></Image>
          </div>
          <div className={styles.howText}>
            We first create boxes around the picture of a carpark to identify
            each parking lot, this is done by running a script which creates a
            rectangle every time you left click using your mouse
          </div>
          <div>
            <Image src={boxes} alt=""></Image>
          </div>
          <div className={styles.howText}>
            The positions of the rectangles are then stored in an array, and
            passed to main.py using the pickle library
          </div>
          <h2 className={styles.header}>Results</h2>
          <div>
            <Image className={styles.images} src={gray} alt=""></Image>
          </div>
          <div className={styles.howText}>
            We test the detection algorithm on a video of the same carpark.
          </div>

          <div>
            <Image className={styles.images} src={grayBlur} alt=""></Image>
          </div>
          <div className={styles.howText}>
            In each frame of the video, the we use OpenCV to gray and blur the
            frame
          </div>
          <div>
            <Image className={styles.images} src={threshold} alt=""></Image>
          </div>
          <div className={styles.howText}>
            Then thresholding is applied to the blurred frame, main.py loops
            through each rectangle to count the number of non-zero pixels. We
            set the threshold at 500 non-zero pixels. If there are more than 500
            non-zero pixels in the rectangle, the lot is classified as non-zero.
          </div>
          <div>
            <Image
              className={styles.images}
              style={{ width: "640px", height: "360px" }}
              src={detection}
              alt=""
            ></Image>
          </div>
          <div className={styles.howText}>
            Empty lots are identified by a green rectangle, while filled lots
            are identified by a red rectangle. The numbers on the bottom left of
            each rectangle represent the number of non-zero pixels.
          </div>
        </div>
      </div>
    </div>
  );
}

{
  /* <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div> */
}

{
  /* <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer> */
}
